name: QA workflow

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to run tests against'
        required: true
        type: environment
      kafkaPurgeTopics:
        description: 'Purge Kafka topics'
        required: true
        default: false
        type: boolean
      runDataPreparation:
        description: 'Data preparation (wipe + reload dump)'
        required: true
        default: false
        type: boolean
      runJSTests:
        description: 'Run JavaScript test suite'
        required: true
        default: false
        type: boolean
      # The inputs below are specific for running the Java test suites defined in pn-b2b-client.
      runJavaTests:
        description: 'Run Java test in pn-b2b-client'
        required: true
        default: false
        type: boolean
      javaTestSuite:
        description: 'Choose which Java test suite to run'
        required: false
        default: NrtTest
        type: string
      javaBranchName:
        description: 'Provide the branch name for pn-b2b-client to clone'
        required: false
        default: main
        type: string
      strictVersionCheck:
        description: 'Set to "false" to disable the version-check step'
        required: false
        default: true
        type: boolean


defaults:
    run:
      shell: bash

permissions:
  id-token: write
  contents: read

env:
   skip_checkUserMembership: "true"
   skip_failNotSelectedEnvTagRef: "true"
   SCRIPTS_FOLDER: "./scripts"

jobs:
  inputs:
    runs-on: ubuntu-22.04
    environment: ${{ inputs.environment }}

    steps:
      - name: Print Inputs
        id: print_inputs
        run: |
          echo "- environment: \`${{ inputs.environment }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- normalized environment: \`${{ vars.NORM_ENV }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- ref: \`${{ github.ref }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- plat-dep versions: \`${{ vars.PLAT_DEP_VERSIONS_URL }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- kafkaPurgeTopics: \`${{ inputs.kafkaPurgeTopics }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- runDataPreparation: \`${{ inputs.runDataPreparation }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- runJavaTests: \`${{ inputs.runJavaTests }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- javaTestSuite: \`${{ inputs.javaTestSuite || 'null' }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- javaBranchName: \`${{ inputs.javaBranchName || 'null' }}\`" >> $GITHUB_STEP_SUMMARY

  create_runner:
    name: Create Self-Hosted Runner
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        index: [1]
      fail-fast: true
    environment: ${{ inputs.environment }}

    steps:
      - name: Start GitHub Runner
        id: start_runner
        uses: pagopa/interop-github-runner-aws-create-action@main
        with:
            environment: ${{ inputs.environment }}
            aws_region: ${{ secrets.AWS_REGION }}
            iam_role_arn: ${{ secrets.ECS_IAM_ROLE_ARN }}
            ecs_cluster_name: ${{ secrets.ECS_CLUSTER_NAME }}
            ecs_task_definition: ${{ secrets.ECS_TASK_DEFINITION }}
            ecs_container_name: ${{ vars.ECS_TASK_CONTAINER_NAME }}
            ecs_task_max_duration_seconds: ${{ vars.ECS_TASK_MAX_DURATION_SECONDS }}
            ecs_task_subnet_id: ${{ secrets.SUBNET_ID }}
            ecs_task_sec_group: ${{ secrets.SEC_GROUP_ID }}
            pat_token: ${{ secrets.BOT_TOKEN }}

  svc_version_check:
    name: Check Deployed Versions
    needs: create_runner
    if: ${{ inputs.strictVersionCheck == 'true' }}
    runs-on: [self-hosted, "run_id:${{ inputs.environment }}-${{ github.run_id }}"]
    environment: ${{ inputs.environment }}
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3

      - name: Get plat-dep versions
        run: |
          curl ${{ vars.PLAT_DEP_VERSIONS_URL }} -o images.yaml

      - name: Set kubeconfig
        run: |
            aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ secrets.EKS_CLUSTER_NAME }}

      - name: Check deployed versions
        id: check_svc_version
        shell: bash
        env:
            AWS_REGION: ${{ secrets.AWS_REGION}}
            EKS_CLUSTER_NAME: ${{ secrets.EKS_CLUSTER_NAME}}
            K8S_NAMESPACE: ${{ vars.K8S_NAMESPACE }}
        run: |
           $SCRIPTS_FOLDER/checkSvcVersion.sh images.yaml
  
  data_prep:
    name: Data Preparation
    needs: [svc_version_check, create_runner]
    runs-on: [self-hosted, "run_id:${{ inputs.environment }}-${{ github.run_id }}"]
    environment: ${{ inputs.environment }}
    if: ${{ always() && inputs.runDataPreparation && needs.create_runner.result == 'success' }}
    env:
      K8S_NAMESPACE: ${{ vars.K8S_NAMESPACE }}
      EVENT_STORE_HOST: ${{ secrets.EVENT_STORE_HOST }}
      EVENT_STORE_DB_NAME: ${{ vars.EVENT_STORE_DB_NAME }}
      READ_MODEL_SQL_HOST: ${{ secrets.READ_MODEL_SQL_HOST }}
      READ_MODEL_SQL_DB_NAME: ${{ vars.READ_MODEL_SQL_DB_NAME }}
      EVENT_STORE_PORT: 5432
      LOCAL_ATTRIBUTE_REGISTRY_DUMPS: "./db_dumps/attribute_registry"
      LOCAL_ATTRIBUTE_REGISTRY_SCHEMA_NAME: "${{ vars.K8S_NAMESPACE }}_attribute_registry"
      LOCAL_ATTRIBUTE_REGISTRY_TABLE_NAME: "events"
      LOCAL_TENANT_DUMPS: "./db_dumps/tenant"
      LOCAL_TENANT_SCHEMA_NAME: "${{ vars.K8S_NAMESPACE }}_tenant"
      LOCAL_TENANT_JOURNAL_TABLE_NAME: "event_journal"
      LOCAL_TENANT_TAG_TABLE_NAME: "event_tag"
      MAX_POLLING_TRIES: "${{ vars.MAX_POLLING_TRIES }}"
      POLLING_SLEEP_TIME: "${{ vars.POLLING_SLEEP_TIME }}"
      DYNAMODB_PLATFORM_STATES_TABLE: ${{ vars.platformStatesTableName }}
      DYNAMODB_TOKEN_GEN_STATES_TABLE: ${{ vars.tokenGenStatesTableName }}
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3

      - name: Create dump dir
        id: mkdir_dump
        shell: bash
        run: |
            set -euo pipefail

            mkdir -p $LOCAL_TENANT_DUMPS
            mkdir -p $LOCAL_ATTRIBUTE_REGISTRY_DUMPS

      - name: Get dump from S3
        id: get_data_dumps
        env:
            AWS_REGION: ${{ secrets.AWS_REGION}}
        run: |
            set -euo pipefail

            aws s3 cp "s3://${{ vars.DATA_PREPARATION_BUCKET }}/${{ vars.TENANT_DUMP_S3_PREFIX }}" $LOCAL_TENANT_DUMPS --recursive
            aws s3 cp "s3://${{ vars.DATA_PREPARATION_BUCKET }}/${{ vars.ATTRIBUTE_REGISTRY_DUMP_S3_PREFIX }}" $LOCAL_ATTRIBUTE_REGISTRY_DUMPS --recursive

      - name: Scale service Deployments to 0
        id: svc_scale_to_0
        shell: bash
        run: |
            set -euo pipefail

            aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ secrets.EKS_CLUSTER_NAME }}

            echo "Scaling deployments to 0"
            kubectl scale deployment -n $K8S_NAMESPACE --replicas=0 --all

            echo "Delete active jobs"
            kubectl delete jobs -n $K8S_NAMESPACE --all
            
            echo "Waiting for pods deletion"
            ACTIVE_PODS_COUNT=$(
              kubectl get pods -n "$K8S_NAMESPACE" -o json \
                | jq '[ .items[]
                       | select(.metadata.ownerReferences[]?.kind=="ReplicaSet")
                     ] | length'
            )
            while [[ $ACTIVE_PODS_COUNT -gt 0 ]]; do
              sleep 2 
              ACTIVE_PODS_COUNT=$(
                kubectl get pods -n "$K8S_NAMESPACE" -o json \
                  | jq '[ .items[]
                         | select(.metadata.ownerReferences[]?.kind=="ReplicaSet")
                       ] | length'
              )
            done
            echo "All the deployments have been scaled down to 0 replicas."    

      - name: Get EventStore DB Credentials
        id: get_evtstore_db_credentials
        env:
          EVENT_STORE_SECRET_ARN: ${{ secrets.EVENT_STORE_SECRET_ARN }}
        shell: bash
        run: |
            set -euo pipefail

            echo "Retrieving event store credentials..."
            
            EVENT_STORE_CREDENTIALS="$(aws secretsmanager get-secret-value --secret-id $EVENT_STORE_SECRET_ARN)"
            #echo "::add-mask::$EVENT_STORE_CREDENTIALS"
            
            echo "Retrieve EventStore username"
            EVENT_STORE_USERNAME="$(echo $EVENT_STORE_CREDENTIALS | jq -r '.SecretString | fromjson | .username')"
            echo "::add-mask::$EVENT_STORE_USERNAME"
            
            echo "Retrieve EventStore password"
            EVENT_STORE_PASSWORD="$(echo $EVENT_STORE_CREDENTIALS | jq -r '.SecretString | fromjson | .password')"
            echo "::add-mask::$EVENT_STORE_PASSWORD"
            
            echo "Update env vars with EventStore credentials"
            echo "EVENT_STORE_USERNAME=$EVENT_STORE_USERNAME" >> "$GITHUB_ENV"
            echo "EVENT_STORE_PASSWORD=$EVENT_STORE_PASSWORD" >> "$GITHUB_ENV"

      - name: Get Read Model SQL DB Credentials
        id: get_readmodel_sql_db_credentials
        if: ${{ vars.READ_MODEL_SQL_DB_NAME != '' }}
        env:
          READ_MODEL_SQL_SECRET_ARN: ${{ secrets.EVENT_STORE_SECRET_ARN }}
        shell: bash
        run: |
            set -euo pipefail

            echo "Retrieving Read Model SQL credentials..."
            
            READ_MODEL_SQL_CREDENTIALS="$(aws secretsmanager get-secret-value --secret-id $READ_MODEL_SQL_SECRET_ARN)"
            #echo "::add-mask::$READ_MODEL_SQL_CREDENTIALS"
            
            echo "Retrieve Read Model SQL username"
            READ_MODEL_SQL_USERNAME="$(echo $READ_MODEL_SQL_CREDENTIALS | jq -r '.SecretString | fromjson | .username')"
            echo "::add-mask::$READ_MODEL_SQL_USERNAME"
            
            echo "Retrieve Read Model SQL password"
            READ_MODEL_SQL_PASSWORD="$(echo $READ_MODEL_SQL_CREDENTIALS | jq -r '.SecretString | fromjson | .password')"
            echo "::add-mask::$READ_MODEL_SQL_PASSWORD"
            
            echo "Update env vars with Read Model SQL credentials"
            echo "READ_MODEL_SQL_USERNAME=$READ_MODEL_SQL_USERNAME" >> "$GITHUB_ENV"
            echo "READ_MODEL_SQL_PASSWORD=$READ_MODEL_SQL_PASSWORD" >> "$GITHUB_ENV"

      - name: Get ReadModel DB Credentials
        id: get_readmodel_db_credentials
        env:
          READ_MODEL_SECRET_ARN: ${{ secrets.READ_MODEL_SECRET_ARN }}
        shell: bash
        run: |
            set -euo pipefail

            echo "Retrieving read model credentials..."
            
            READ_MODEL_CREDENTIALS="$(aws secretsmanager get-secret-value --secret-id $READ_MODEL_SECRET_ARN)"
            #echo "::add-mask::$READ_MODEL_CREDENTIALS"
            
            echo "Retrieve ReadModel username"
            READ_MODEL_USERNAME="$(echo $READ_MODEL_CREDENTIALS | jq -r '.SecretString | fromjson | .username')"
            echo "::add-mask::$READ_MODEL_USERNAME"

            echo "Retrieve ReadModel password"
            READ_MODEL_PASSWORD="$(echo $READ_MODEL_CREDENTIALS | jq -r '.SecretString | fromjson | .password')"
            echo "::add-mask::$READ_MODEL_PASSWORD"
            
            echo "Update env vars with ReadModel credentials"
            echo "READ_MODEL_USERNAME=$READ_MODEL_USERNAME" >> "$GITHUB_ENV"
            echo "READ_MODEL_PASSWORD=$READ_MODEL_PASSWORD" >> "$GITHUB_ENV"

      - name: Truncate EventStore DB Tables
        id: event_store_db_truncate
        shell: bash
        env:
          PGUSER: ${{ env.EVENT_STORE_USERNAME }}
          PGPASSWORD: ${{ env.EVENT_STORE_PASSWORD }}
          PGHOST: ${{ env.EVENT_STORE_HOST }}
          PGPORT: ${{ env.EVENT_STORE_PORT }}
          PGDATABASE: ${{ vars.EVENT_STORE_DB_NAME }}
        run: |
          $SCRIPTS_FOLDER/truncateSQLTables.sh

      - name: Truncate ReadModel SQL DB Tables
        id: read_model_sql_db_truncate
        if: ${{ vars.READ_MODEL_SQL_DB_NAME != '' }}
        shell: bash
        env:
          PGUSER: ${{ env.READ_MODEL_SQL_USERNAME }}
          PGPASSWORD: ${{ env.READ_MODEL_SQL_PASSWORD }}
          PGHOST: ${{ env.READ_MODEL_SQL_HOST }}
          PGPORT: ${{ env.READ_MODEL_SQL_PORT }}
          PGDATABASE: ${{ vars.READ_MODEL_SQL_DB_NAME }}
        run: |
          $SCRIPTS_FOLDER/truncateSQLTables.sh

      - name: Clear ReadModel Collections
        id: read_model_db_clear
        shell: bash
        env:
          READ_MODEL_HOST: ${{ secrets.READ_MODEL_HOST }}
          READ_MODEL_PORT: 27017
          READ_MODEL_USERNAME: ${{ env.READ_MODEL_USERNAME }}
          READ_MODEL_PASSWORD: ${{ env.READ_MODEL_PASSWORD }}
          READ_MODEL_DB_NAME: ${{ vars.READ_MODEL_DB_NAME }}
        run: |
          $SCRIPTS_FOLDER/deleteReadModelItems.sh

      - name: Checkout Kafka tools
        id: kafka_tools
        if: ${{ always() && inputs.kafkaPurgeTopics }}
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          repository: pagopa/pdnd-interop-platform-deployment
          path: plat-dep
          sparse-checkout: kafka

      - name: Purge Kafka topics
        id: clean_kafka
        if: ${{ always() && inputs.kafkaPurgeTopics }}
        shell: bash
        working-directory: plat-dep/kafka/scripts
        env:
            AWS_REGION: ${{ secrets.AWS_REGION}}
            KAFKA_BROKERS: ${{ vars.KAFKA_BROKERS }}
            TOPICS_PROPERTIES_PATH: ../topics/${{ vars.NORM_ENV }}/
        run: |
          set -eou pipefail

          npm ci

          export DOMAIN_TOPIC_PREFIX="${{ vars.EVENT_STORE_DOMAIN_TOPIC_PREFIX }}"
          npm run kafka:deleteTopics

          export DOMAIN_TOPIC_PREFIX="${{ vars.OUTBOUND_DOMAIN_TOPIC_PREFIX }}"
          npm run kafka:deleteTopics

          npm run kafka:createTopics

      - name: Purge Auth-Server DynamoDB Tables
        id: purge_dynamodb
        if: ${{ always() }}
        env:
          AWS_REGION: ${{ secrets.AWS_REGION}}
          PLATFORM_STATES_TABLE_NAME: ${{ vars.PLATFORM_STATES_TABLE_NAME }}
          TOKEN_GENERATION_TABLE_NAME: ${{ vars.TOKEN_GENERATION_TABLE_NAME }}
        run: |
          set -euo pipefail
          
          echo "Starting ${PLATFORM_STATES_TABLE_NAME} DynamoDB table purge..."
          ./scripts/purge-dynamodb-tables.sh  "${PLATFORM_STATES_TABLE_NAME}"
          echo "${PLATFORM_STATES_TABLE_NAME} table purged successfully"
            
          echo "Starting ${TOKEN_GENERATION_TABLE_NAME} DynamoDB table purge..."
          ./scripts/purge-dynamodb-tables.sh  "${TOKEN_GENERATION_TABLE_NAME}"
          echo "${TOKEN_GENERATION_TABLE_NAME} DynamoDB tables purged successfully"
            
          echo "DynamoDB tables purged successfully"
            
      - name: Restore Dump
        id: db_dump_restore
        shell: bash
        run: |
          $SCRIPTS_FOLDER/restoreEventStore.sh

      - name: Scale service Deployments to 1
        id: svc_scale_to_1
        shell: bash
        run: |
          set -euo pipefail
          
          echo "Scaling deployments to 1 replica"
          kubectl scale deployment -n $K8S_NAMESPACE --replicas=1 --all

          PODS_NOT_READY_COUNT=$(kubectl get pods -n "$K8S_NAMESPACE" -o json | 
          jq '[ .items[] | select(.status.phase != "Running" or ([ .status.conditions[] | select(.type == "Ready" and .state == false) ] | length ) == 1 ) ] | length')

          echo "Waiting for pods readiness"
          while [[ $PODS_NOT_READY_COUNT -gt 0 ]]; do
            sleep 2
           
            PODS_NOT_READY_COUNT=$(kubectl get pods -n "$K8S_NAMESPACE" -o json | 
              jq '[ .items[] | select(.status.phase != "Running" or ([ .status.conditions[] | select(.type == "Ready" and .state == false) ] | length ) == 1 ) ] | length')
          done
        
          echo "All the deployments have been scaled up to 1 replicas."
  
  run_js_test:
    name: Run JavaScript Cucumber Test Suite
    if: ${{ always() && inputs.runJSTests }}
    needs: [data_prep, create_runner]
    runs-on: [self-hosted, "run_id:${{ inputs.environment }}-${{ github.run_id }}"]
    environment: ${{ inputs.environment }}
    env:
      ENVIRONMENT: ${{ vars.ENVIRONMENT }}
      SESSION_TOKENS_DURATION_SECONDS: ${{ vars.SESSION_TOKENS_DURATION_SECONDS }}
      REMOTE_WELLKNOWN_URL: ${{ vars.REMOTE_WELLKNOWN_URL }}
      BFF_BASE_URL: ${{ vars.BFF_BASE_URL }}
      ST_VERBOSE_MODE: ${{ vars.ST_VERBOSE_MODE }}
      TENANTS_IDS_FILE_PATH: ${{ vars.TENANTS_IDS_FILE_PATH }}
      CUCUMBER_OPTS_PARALLEL: ${{ vars.CUCUMBER_OPTS_PARALLEL }}
      MAX_POLLING_TRIES:  ${{ vars.MAX_POLLING_TRIES }}
      POLLING_SLEEP_TIME: ${{ vars.POLLING_SLEEP_TIME }}
      AUTHORIZATION_SERVER_TOKEN_CREATION_URL: ${{ vars.AUTHORIZATION_SERVER_TOKEN_CREATION_URL }}
      CLIENT_ASSERTION_JWT_AUDIENCE: ${{ vars.CLIENT_ASSERTION_JWT_AUDIENCE }}
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Setup Node
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        with:
          node-version-file: ./package.json

      - name: Setup pnpm
        uses: pnpm/action-setup@a7487c7e89a18df4991f7f222e4898a00d66ddda # v4.1.0
        with:
          run_install: true

      - name: Run QA tests
        id: run_qa_tests
        shell: bash
        run: |
          set -uo pipefail
          
          echo "Install node dependencies"
          pnpm i
          
          echo "Run test command"
          pnpm test

  run_java_test:
    name: Run Java Cucumber Test Suite
    if: ${{ always() && !inputs.runJSTests && inputs.runJavaTests }}
    needs: [run_js_test]
    runs-on: [self-hosted, "run_id:${{ inputs.environment }}-${{ github.run_id }}"]
    environment: ${{ inputs.environment }}
    env:
      ENVIRONMENT: ${{ vars.ENVIRONMENT }}
      ST_VERBOSE_MODE: ${{ vars.ST_VERBOSE_MODE }}

    steps:
      - name: Set up Maven
        uses: s4u/setup-maven-action@6d44c18d67d9e1549907b8815efa5e4dada1801b # v1.12.0
        with:
          java-version: 17
          maven-version: 3.9.8

      - name: Clone the pn-b2b-client repo
        id: clone_pn-b2b-client
        shell: bash
        run: |
          echo "Cloning pn-b2b-client repo.."
          git clone --depth 1 --branch ${{ inputs.javaBranchName }} https://github.com/pagopa/pn-b2b-client.git
          echo "pn-b2b-client repo has been cloned"

      - name: Run QA tests
        id: run_pn-b2b-client_tests
        shell: bash
        run: |
          set -uo pipefail
          echo "Running tests..."
          echo "ENVIRONMENT is: ${ENVIRONMENT}"

          if [[ "${ENVIRONMENT}" == *qa* ]]; then
            SPRING_PROFILE="-Dspring.profiles.active=qa"
          else
            SPRING_PROFILE="-Dspring.profiles.active=dev"
          fi

          echo "Using Spring profile: ${SPRING_PROFILE}"

          cd ./pn-b2b-client/interop-qa-tests && mvn $SPRING_PROFILE -Dtest=it.pagopa.pn.interop.cucumber.${{ inputs.javaTestSuite }} clean verify

      - name: Upload Cucumber Report
        if: always()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: cucumber-report
          path: pn-b2b-client/interop-qa-tests/target/cucumber-report.html
          retention-days: 10

  delete_runner:
    name: Delete Self-Hosted Runner
    needs: [create_runner, svc_version_check, data_prep, run_js_test, run_java_test]    
    if: ${{ always() }}
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        index: [1]
      fail-fast: true
    environment: ${{ inputs.environment }}

    steps:
      - name: Stop Github Runner
        id: stop_runner
        uses: pagopa/interop-github-runner-aws-cleanup-action@main
        with:
            environment: ${{ inputs.environment }}
            aws_region: ${{ secrets.AWS_REGION }}
            iam_role_arn: ${{ secrets.ECS_IAM_ROLE_ARN }}
            ecs_cluster_name: ${{ secrets.ECS_CLUSTER_NAME }}
            pat_token: ${{ secrets.BOT_TOKEN }}
